searchState.loadedDescShard("storm", 0, "Contains the error value\nIndicate if a key is not zero. This trait must be …\nContains the success value\nA thread-safe cell which can be written to only once.\nCollect the items and sort them.\nCollect the items and sort them.\nCollect the items and sort them by the cmp function …\nCollect the items and sort them by the cmp function …\nCollect the items and sort them using a key_cmp function.\nCollect the items and sort them using a key_cmp function.\nCollect the items and sort them by the cmp function …\nCollect the items and sort them by the cmp function …\nCollect the items and sort them by the key_cmp function …\nCollect the items and sort them by the key_cmp function …\nCreates an initialized new VersionTag. This is the same as …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSafety\nSafety\nGets the reference to the underlying value.\ngets a reference from the log or the underlying ctx.\nGets the mutable reference to the underlying value.\nReturns a mutable reference to the underlying data.\nGets the contents of the cell, initializing it with <code>f</code> if …\nGets the contents of the cell, initializing it with <code>f</code> if …\nGets a reference by consuming the tbl transaction. This …\nGet the reference to the underlying value, without …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>OnceCell</code>, returning the wrapped value. Returns\nConsumes this <code>RwLock</code>, returning the underlying data.\nCreates an initialized new VersionTag.\nCreates a new empty cell.\nCreates a new instance of an <code>QueueRwLock&lt;T&gt;</code> which is …\nInternally increment the counter of the tag to signal a …\nEnqueue to gain access to the write.\nLocks this <code>RwLock</code> with shared read access\nRetains only the elements specified by the predicate.\nSets the contents of this cell to <code>value</code>.\nTakes the value out of this <code>OnceCell</code>, moving it back to an …\nIndicate if the table specified ty the entity E has been …\nLike <code>set</code>, but also returns a reference to the final cell …\nAttempts to acquire the queue, and returns <code>None</code> if any …\nGets the reference to the underlying value, blocking the …\nCreates a new initialized cell.\nCreates a version 0 which could indicate that the …\nNo value.\nSome value of type <code>T</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNo value.\nSome value of type <code>T</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNo value.\nSome value of type <code>T</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNo value.\nSome value of type <code>T</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA dependency container to be able to instantiate and …\nThis trait is implemented when the entity or the key must …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA method to garbage collect all unused provider. This is …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets or creates a database provider that have been …\nRegister a provider factory that creates provider on …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")